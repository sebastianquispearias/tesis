{
    "sourceFile": "models.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1750538580718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750545875229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     elif arch == 'fpn':\r\n         base = sm.FPN(backbone, classes=n_classes, activation=None, encoder_weights='imagenet', encoder_freeze=freeze_encoder,input_shape=input_shape)\r\n     elif arch == 'deeplabv3+':\r\n         base = DeepLabV3Plus(\r\n-            backbone_name=backbone,\r\n+            backbone_name='resnet34',\r\n             input_shape=input_shape,\r\n             classes=n_classes,\r\n             activation=None,\r\n             weights='imagenet'  # o None para entrenar desde cero\r\n"
                },
                {
                    "date": 1750547356423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,15 +12,16 @@\n     elif arch == 'pspnet':\r\n         base = sm.PSPNet(backbone, classes=n_classes, activation=None, encoder_weights='imagenet', encoder_freeze=freeze_encoder,input_shape=input_shape)\r\n     elif arch == 'fpn':\r\n         base = sm.FPN(backbone, classes=n_classes, activation=None, encoder_weights='imagenet', encoder_freeze=freeze_encoder,input_shape=input_shape)\r\n+        #base = DeepLabV3Plus(backbone,input_shape=input_shape,classes=n_classes,activation=None,eights='imagenet')  # o None para entrenar desde cero)\r\n     elif arch == 'deeplabv3+':\r\n         base = DeepLabV3Plus(\r\n-            backbone_name='resnet34',\r\n+            backbone,\r\n             input_shape=input_shape,\r\n             classes=n_classes,\r\n             activation=None,\r\n-            weights='imagenet'  # o None para entrenar desde cero\r\n+            weights='imagenet'      # <-- typo y valor inválido\r\n         )\r\n \r\n     \r\n     else:\r\n"
                },
                {
                    "date": 1750547595244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,13 +15,13 @@\n         base = sm.FPN(backbone, classes=n_classes, activation=None, encoder_weights='imagenet', encoder_freeze=freeze_encoder,input_shape=input_shape)\r\n         #base = DeepLabV3Plus(backbone,input_shape=input_shape,classes=n_classes,activation=None,eights='imagenet')  # o None para entrenar desde cero)\r\n     elif arch == 'deeplabv3+':\r\n         base = DeepLabV3Plus(\r\n-            backbone,\r\n+            weights='imagenet,\r\n             input_shape=input_shape,\r\n             classes=n_classes,\r\n-            activation=None,\r\n-            weights='imagenet'      # <-- typo y valor inválido\r\n+            backbone=backbone,\r\n+            activation=None      # <-- typo y valor inválido\r\n         )\r\n \r\n     \r\n     else:\r\n"
                },
                {
                    "date": 1750547615767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         base = sm.FPN(backbone, classes=n_classes, activation=None, encoder_weights='imagenet', encoder_freeze=freeze_encoder,input_shape=input_shape)\r\n         #base = DeepLabV3Plus(backbone,input_shape=input_shape,classes=n_classes,activation=None,eights='imagenet')  # o None para entrenar desde cero)\r\n     elif arch == 'deeplabv3+':\r\n         base = DeepLabV3Plus(\r\n-            weights='imagenet,\r\n+            weights='imagene't,\r\n             input_shape=input_shape,\r\n             classes=n_classes,\r\n             backbone=backbone,\r\n             activation=None      # <-- typo y valor inválido\r\n"
                },
                {
                    "date": 1750547621375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         base = sm.FPN(backbone, classes=n_classes, activation=None, encoder_weights='imagenet', encoder_freeze=freeze_encoder,input_shape=input_shape)\r\n         #base = DeepLabV3Plus(backbone,input_shape=input_shape,classes=n_classes,activation=None,eights='imagenet')  # o None para entrenar desde cero)\r\n     elif arch == 'deeplabv3+':\r\n         base = DeepLabV3Plus(\r\n-            weights='imagene't,\r\n+            weights='imagenet',\r\n             input_shape=input_shape,\r\n             classes=n_classes,\r\n             backbone=backbone,\r\n             activation=None      # <-- typo y valor inválido\r\n"
                },
                {
                    "date": 1750547751419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         base = sm.FPN(backbone, classes=n_classes, activation=None, encoder_weights='imagenet', encoder_freeze=freeze_encoder,input_shape=input_shape)\r\n         #base = DeepLabV3Plus(backbone,input_shape=input_shape,classes=n_classes,activation=None,eights='imagenet')  # o None para entrenar desde cero)\r\n     elif arch == 'deeplabv3+':\r\n         base = DeepLabV3Plus(\r\n-            weights='imagenet',\r\n+            weights= None,\r\n             input_shape=input_shape,\r\n             classes=n_classes,\r\n             backbone=backbone,\r\n             activation=None      # <-- typo y valor inválido\r\n"
                },
                {
                    "date": 1750547814436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         base = DeepLabV3Plus(\r\n             weights= None,\r\n             input_shape=input_shape,\r\n             classes=n_classes,\r\n-            backbone=backbone,\r\n+            backbone='mobilenetv2',\r\n             activation=None      # <-- typo y valor inválido\r\n         )\r\n \r\n     \r\n"
                },
                {
                    "date": 1750559979144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,39 +5,51 @@\n from tensorflow.keras.metrics import Precision, Recall\r\n from tensorflow import keras\r\n from deeplabv3p.model import Deeplabv3 as DeepLabV3Plus\r\n \r\n-def build_model(arch, backbone, n_classes, activation, lr, input_shape=(384,384,3), dropout=0.3,freeze_encoder=False):# eliminar freezer\r\n-    if arch == 'baseline':\r\n-        base = sm.Unet(backbone, classes=n_classes, activation=None, encoder_weights='imagenet', encoder_freeze=freeze_encoder,input_shape=input_shape)\r\n-    elif arch == 'pspnet':\r\n-        base = sm.PSPNet(backbone, classes=n_classes, activation=None, encoder_weights='imagenet', encoder_freeze=freeze_encoder,input_shape=input_shape)\r\n-    elif arch == 'fpn':\r\n-        base = sm.FPN(backbone, classes=n_classes, activation=None, encoder_weights='imagenet', encoder_freeze=freeze_encoder,input_shape=input_shape)\r\n-        #base = DeepLabV3Plus(backbone,input_shape=input_shape,classes=n_classes,activation=None,eights='imagenet')  # o None para entrenar desde cero)\r\n-    elif arch == 'deeplabv3+':\r\n-        base = DeepLabV3Plus(\r\n-            weights= None,\r\n-            input_shape=input_shape,\r\n-            classes=n_classes,\r\n-            backbone='mobilenetv2',\r\n-            activation=None      # <-- typo y valor inválido\r\n-        )\r\n+def build_model(\r\n+    arch,\r\n+    backbone,       # aquí no se usa: el exp de Pascal VOC viene predefinido con Xception\r\n+    n_classes,\r\n+    activation,\r\n+    lr,\r\n+    input_shape=(384, 384, 3),\r\n+    freeze_encoder=False\r\n+):\r\n+    if arch == 'deeplabv3+':\r\n+        # 1) Carga la config de DeepLabV3+ | Pascal VOC\r\n+        exp_config = get_exp_config('seg_deeplabv3plus_pascal')\r\n \r\n-    \r\n-    else:\r\n-        raise ValueError(f\"Arquitectura desconocida: {arch}\")\r\n+        # 2) Crea la Task (monta modelo + lógica interna)\r\n+        task = get_task(exp_config.task, logging_dir=None)\r\n \r\n-    x = keras.layers.Dropout(dropout)(base.output)\r\n-    x = keras.layers.Activation(activation, name=activation)(x)\r\n-    model = keras.models.Model(inputs=base.input, outputs=x)\r\n+        # 3) Construye el modelo base (tf.keras.Model)\r\n+        base = task.build_model()\r\n \r\n-    optim   = keras.optimizers.Adam(lr)\r\n-    loss    = sm.losses.DiceLoss()\r\n-    metrics = [\r\n-        sm.metrics.IOUScore(threshold=0.5),  # IoU\r\n-        Precision(name='precision'),         # Precisión\r\n-        Recall(name='recall'),               # Recall\r\n-        sm.metrics.FScore(threshold=0.5)     # F1-Score\r\n-    ]\r\n-    model.compile(optimizer=optim, loss=loss, metrics=metrics)\r\n-    return model\r\n+        # 4) Injerta tu propia cabeza de salida para 'n_classes'\r\n+        x = base.output\r\n+        x = tf.keras.layers.Conv2D(\r\n+            filters=n_classes,\r\n+            kernel_size=1,\r\n+            activation=activation,\r\n+            name='custom_logits'\r\n+        )(x)\r\n+        model = tf.keras.Model(inputs=base.input, outputs=x)\r\n+\r\n+        # 5) (Opcional) congelar encoder\r\n+        if freeze_encoder:\r\n+            for layer in model.layers:\r\n+                # en la config original el encoder es Xception; \r\n+                # si quisieras congelar, podrías usar layer.name.startswith('entry') etc.\r\n+                if layer.name.startswith('entry') or layer.name.startswith('middle') or layer.name.startswith('exit'):\r\n+                    layer.trainable = False\r\n+\r\n+        # 6) Compila con tu optimizador y tus pérdidas/métricas\r\n+        model.compile(\r\n+            optimizer=tf.keras.optimizers.Adam(learning_rate=lr),\r\n+            loss=tf.keras.losses.BinaryCrossentropy() if n_classes == 1 else 'categorical_crossentropy',\r\n+            metrics=[\r\n+                # importa y usa tus métricas definidas en metrics_utils\r\n+                # e.g. iou_score, precision, recall, f1_score\r\n+            ]\r\n+        )\r\n+        return model\r\n"
                },
                {
                    "date": 1750560231809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,12 @@\n \r\n from tensorflow.keras.metrics import Precision, Recall\r\n from tensorflow import keras\r\n from deeplabv3p.model import Deeplabv3 as DeepLabV3Plus\r\n+import tensorflow_models as tfm\r\n+from tfm.core.exp_factory import get_exp_config\r\n+from tfm.core.task_factory import get_task\r\n+from metrics_utils import iou_score, f1_score\r\n \r\n def build_model(\r\n     arch,\r\n     backbone,       # aquí no se usa: el exp de Pascal VOC viene predefinido con Xception\r\n@@ -42,14 +46,16 @@\n                 # si quisieras congelar, podrías usar layer.name.startswith('entry') etc.\r\n                 if layer.name.startswith('entry') or layer.name.startswith('middle') or layer.name.startswith('exit'):\r\n                     layer.trainable = False\r\n \r\n-        # 6) Compila con tu optimizador y tus pérdidas/métricas\r\n+ \r\n         model.compile(\r\n             optimizer=tf.keras.optimizers.Adam(learning_rate=lr),\r\n             loss=tf.keras.losses.BinaryCrossentropy() if n_classes == 1 else 'categorical_crossentropy',\r\n             metrics=[\r\n-                # importa y usa tus métricas definidas en metrics_utils\r\n-                # e.g. iou_score, precision, recall, f1_score\r\n+                iou_score,                      # IoU sobre la máscara :contentReference[oaicite:5]{index=5}\r\n+                Precision(name='precision'),\r\n+                Recall(name='recall'),\r\n+                f1_score                        # F1 Score :contentReference[oaicite:6]{index=6}\r\n             ]\r\n         )\r\n         return model\r\n"
                }
            ],
            "date": 1750538580718,
            "name": "Commit-0",
            "content": "# models.py  (sólo cambian las arquitecturas)\r\nimport segmentation_models as sm\r\nimport tensorflow as tf\r\n\r\nfrom tensorflow.keras.metrics import Precision, Recall\r\nfrom tensorflow import keras\r\nfrom deeplabv3p.model import Deeplabv3 as DeepLabV3Plus\r\n\r\ndef build_model(arch, backbone, n_classes, activation, lr, input_shape=(384,384,3), dropout=0.3,freeze_encoder=False):# eliminar freezer\r\n    if arch == 'baseline':\r\n        base = sm.Unet(backbone, classes=n_classes, activation=None, encoder_weights='imagenet', encoder_freeze=freeze_encoder,input_shape=input_shape)\r\n    elif arch == 'pspnet':\r\n        base = sm.PSPNet(backbone, classes=n_classes, activation=None, encoder_weights='imagenet', encoder_freeze=freeze_encoder,input_shape=input_shape)\r\n    elif arch == 'fpn':\r\n        base = sm.FPN(backbone, classes=n_classes, activation=None, encoder_weights='imagenet', encoder_freeze=freeze_encoder,input_shape=input_shape)\r\n    elif arch == 'deeplabv3+':\r\n        base = DeepLabV3Plus(\r\n            backbone_name=backbone,\r\n            input_shape=input_shape,\r\n            classes=n_classes,\r\n            activation=None,\r\n            weights='imagenet'  # o None para entrenar desde cero\r\n        )\r\n\r\n    \r\n    else:\r\n        raise ValueError(f\"Arquitectura desconocida: {arch}\")\r\n\r\n    x = keras.layers.Dropout(dropout)(base.output)\r\n    x = keras.layers.Activation(activation, name=activation)(x)\r\n    model = keras.models.Model(inputs=base.input, outputs=x)\r\n\r\n    optim   = keras.optimizers.Adam(lr)\r\n    loss    = sm.losses.DiceLoss()\r\n    metrics = [\r\n        sm.metrics.IOUScore(threshold=0.5),  # IoU\r\n        Precision(name='precision'),         # Precisión\r\n        Recall(name='recall'),               # Recall\r\n        sm.metrics.FScore(threshold=0.5)     # F1-Score\r\n    ]\r\n    model.compile(optimizer=optim, loss=loss, metrics=metrics)\r\n    return model\r\n"
        }
    ]
}