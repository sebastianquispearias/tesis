{
    "sourceFile": "losses.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750610496160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750610496160,
            "name": "Commit-0",
            "content": "import torch\r\nimport torch.nn as nn\r\nimport kornia.morphology as kornia_morph\r\n\r\nclass LossConsistenciaMorfologicaCompuesta(nn.Module):\r\n    def __init__(self, lista_kernels):\r\n        super().__init__()\r\n        self.kernels = lista_kernels\r\n        self.comparador_loss = nn.MSELoss()\r\n\r\n    def forward(self, prediccion_student, prediccion_profesor):\r\n        pred_profesor_sin_grad = prediccion_profesor.detach()\r\n        loss_total = 0.0\r\n\r\n        # Itera sobre la librer√≠a de kernels y acumula el loss\r\n        for kernel in self.kernels:\r\n            objetivo_erosionado = kornia_morph.erosion(pred_profesor_sin_grad, kernel)\r\n            objetivo_dilatado = kornia_morph.dilation(pred_profesor_sin_grad, kernel)\r\n            \r\n            loss_kernel = self.comparador_loss(prediccion_student, objetivo_erosionado) + \\\r\n                          self.comparador_loss(prediccion_student, objetivo_dilatado)\r\n            \r\n            loss_total += loss_kernel\r\n        \r\n        # Devolvemos el promedio de los losses de todos los kernels\r\n        return loss_total / len(self.kernels)"
        }
    ]
}