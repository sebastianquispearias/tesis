{
    "sourceFile": "analizar_morfologia_mascaras.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750609591335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750609591335,
            "name": "Commit-0",
            "content": "import sys\r\nimport cv2\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom skimage.measure import label, regionprops_table\r\n\r\ndef analizar_mascaras(directorio_mascaras):\r\n    \"\"\"\r\n    Analiza todas las máscaras en un directorio para extraer estadísticas\r\n    de forma de los defectos. python analizar_morfologia_mascaras.py \"data/all_results/regimes/C75/train/masks_labeled\"\r\n    \"\"\"\r\n    # Usamos glob para encontrar todas las imágenes .png\r\n    from glob import glob\r\n    rutas_mascaras = glob(f\"{directorio_mascaras}/*.png\")\r\n\r\n    if not rutas_mascaras:\r\n        print(f\"Error: No se encontraron máscaras en '{directorio_mascaras}'\")\r\n        return\r\n\r\n    print(f\"Analizando {len(rutas_mascaras)} máscaras...\")\r\n\r\n    all_props = []\r\n    for ruta in rutas_mascaras:\r\n        # Cargar la máscara y binarizar\r\n        mask = cv2.imread(ruta, cv2.IMREAD_GRAYSCALE)\r\n        if mask is None:\r\n            continue\r\n        \r\n        # Binarizar la máscara (asumimos que el defecto es cualquier cosa > 0)\r\n        mask_binaria = (mask > 0).astype(np.uint8)\r\n\r\n        # Etiquetar regiones conectadas (cada mancha de defecto)\r\n        mascara_etiquetada = label(mask_binaria)\r\n\r\n        # Extraer propiedades de cada región\r\n        # Solo calculamos para máscaras que no están completamente vacías\r\n        if mascara_etiquetada.max() > 0:\r\n            props = regionprops_table(\r\n                mascara_etiquetada,\r\n                properties=('area', 'equivalent_diameter', \r\n                            'major_axis_length', 'minor_axis_length', 'orientation')\r\n            )\r\n            all_props.append(pd.DataFrame(props))\r\n\r\n    if not all_props:\r\n        print(\"No se encontraron defectos en ninguna de las máscaras analizadas.\")\r\n        return\r\n\r\n    # Combinar todas las propiedades en un único DataFrame\r\n    df = pd.concat(all_props, ignore_index=True)\r\n\r\n    # Calcular el ratio de aspecto (elongación)\r\n    # Añadimos un valor pequeño para evitar división por cero si un defecto es una línea perfecta\r\n    df['aspect_ratio'] = df['major_axis_length'] / (df['minor_axis_length'] + 1e-6)\r\n\r\n    # Convertir orientación de radianes a grados\r\n    df['orientation_deg'] = np.rad2deg(df['orientation'])\r\n\r\n    # --- Resultados ---\r\n    print(\"\\n--- ANÁLISIS ESTADÍSTICO DE FORMAS DE DEFECTOS ---\\n\")\r\n\r\n    # 1. Análisis de TAMAÑO (en píxeles)\r\n    print(\"1. Distribución de Tamaño (Diámetro Equivalente):\")\r\n    p25, p50, p75 = np.percentile(df['equivalent_diameter'], [25, 50, 75])\r\n    print(f\"   - Percentil 25 (P25): {p25:.2f} px\")\r\n    print(f\"   - Mediana (P50):      {p50:.2f} px\")\r\n    print(f\"   - Percentil 75 (P75): {p75:.2f} px\\n\")\r\n\r\n    # 2. Análisis de FORMA (Elongación)\r\n    print(\"2. Distribución de Forma (Ratio de Aspecto):\")\r\n    mediana_ar = df['aspect_ratio'].median()\r\n    print(f\"   - Mediana del Ratio de Aspecto: {mediana_ar:.2f}\")\r\n    print(\"     (Un valor de 1.0 es un círculo perfecto. Valores > 1 son elípticos/alargados)\\n\")\r\n\r\n    # 3. Análisis de ORIENTACIÓN (en grados)\r\n    print(\"3. Distribución de Orientación:\")\r\n    # Histograma para ver la distribución de ángulos\r\n    hist, bin_edges = np.histogram(df['orientation_deg'], bins=12, range=(-90, 90))\r\n    print(\"   - Histograma de Orientaciones (de -90° a 90°):\")\r\n    for i in range(len(hist)):\r\n        print(f\"     - Rango {bin_edges[i]:.0f}° a {bin_edges[i+1]:.0f}°: {hist[i]} defectos\")\r\n\r\nif __name__ == '__main__':\r\n    if len(sys.argv) != 2:\r\n        print(\"Uso: python analizar_morfologia_mascaras.py <ruta_al_directorio_de_mascaras>\")\r\n        sys.exit(1)\r\n    \r\n    directorio = sys.argv[1]\r\n    analizar_mascaras(directorio)"
        }
    ]
}