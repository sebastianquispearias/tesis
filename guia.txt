pip install scikit-learn
.\pcvenvtesis38\Scripts\Activate.ps1

main_final_ultimoPCnuevo.py – Entrenamiento supervisado (A-Full, Bxx) y semi-supervisado (Cxx, Mean Teacher)

Uso:
  python main_semisup_gtestaug.py --mode supervised --regime B25
  python main_final_ultimoPCnuevosemisuperv.py --mode semi       --regime C25

  python main_semisup_gtestaug.py --mode semi       --regime C25

python main_semisup_sebas.py --mode semi       --regime C25
python main_semisup_sebas.py --mode supervised       --regime B25
  __________________gpu________________________________________________________________________________________
Use comandos “python -c” em vez de <<EOF, pois PowerShell não entende here-doc do Bash. Por exemplo:

Verificar versão do TF e GPUs disponíveis:

powershell
Copiar
Editar
python -c "import tensorflow as tf; print('TF version:', tf.__version__); print('GPUs disponíveis:', tf.config.list_physical_devices('GPU'))"
Verificar se o nvcc (CUDA Toolkit) está no PATH:

nvcc --version
Testar existência dos arquivos cuDNN (ajuste a pasta para sua versão de CUDA):

Test-Path "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.2\bin\cudnn64_8.dll"
Test-Path "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.2\include\cudnn.h"
Test-Path "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.2\lib\x64\cudnn.lib"
Cada um deve retornar True.

Rodar o script de debug_cuda.py:


makefile
Copiar
Editar
nvcuda.dll: ✅ cargada
cudart64_112.dll: ✅ cargada
cudnn64_8.dll:  ✅ cargada
Confirmar que o TF usa GPU:

python -c "import tensorflow as tf; print('GPU em uso:', tf.test.is_gpu_available())"

  __________________gpu________________________________________________________________________________________

pip uninstall tensorflow
pip install tensorflow-gpu==2.4.1

# 1) Asegúrate de no tener entornos anidados:
conda deactivate

# 2) Activa tu entorno correcto (el que tiene TF 2.4.1 y CUDA/cuDNN):
conda activate tesis_tf38

# 3) Verifica que Python sea el que esperas:
where python
python --version

# 4) Lista tus entornos para confirmar que estás en el bueno:
conda env list

# 5) Verifica la versión de TensorFlow:
python -c "import tensorflow as tf; print('TF version:', tf.__version__)"

# 6) Verifica que TensorFlow vea tu GPU:
python -c "import tensorflow as tf; print('GPUs disponibles:', tf.config.list_physical_devices('GPU'))"

# 7) Ejecuta el script de diagnóstico de CUDA/cuDNN:
python debug_cuda.py

# 8) Comprueba que el driver NVIDIA esté activo:
nvidia-smi

# 9) Lista los paquetes instalados clave:
pip list | findstr /R "tensorflow cudatoolkit cudnn"

# 10) Verifica tu PATH incluye las rutas de CUDA/cuDNN:
#    (en PowerShell)
echo $env:PATH


python .\inferencia.py `
  --input "data/all_results/regimes/C75/test/images/vt_test_6.png" `
  --mask  "data/all_results/regimes/C75/test/masks/vt_test_6.png" `
  --weights "models_MT_semisup_baselineC50/baseline_best_student.weights.h5" 



  __________________gpu________________________________________________________________________________________PYTORCH
  >>> import os
>>> # (Opcional) evita el error de OpenMP al cargar PyTorch
>>> os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"  
>>> import torch
>>> print("CUDA available:", torch.cuda.is_available())
>>> print("Device count:  ", torch.cuda.device_count())
>>> 


conda activate deeplab-env                                                             